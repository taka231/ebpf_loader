use anyhow::{Context as _, Result};
use rust_ebpf_loader::{
    btf_parser, elf, elf_parser,
    syscalls_wrapper::{self, BpfProgType},
};

fn main() -> Result<()> {
    let vmlinux_path = "/sys/kernel/btf/vmlinux";
    let vmlinux_bin = std::fs::read(vmlinux_path)?;
    let vmlinux_btf = btf_parser::parse_btf(&vmlinux_bin, 0)?;

    let path = "./ebpf_bin/xdp_ipv6_drop_core_wrong.o";
    let elf = elf_parser::parse_elf(path)?;
    let mut xdp_section = elf
        .get_section_body("xdp")
        .context("Failed to get xdp section")?
        .to_vec();

    let xdp_btf_section = btf_parser::parse_btf(elf.get_section_body(".BTF").unwrap(), 0)?;
    let xdp_btf_ext_section =
        btf_parser::parse_btf_ext(elf.get_section_body(".BTF.ext").unwrap(), 0)?;

    elf::core_relocate(
        &mut xdp_section,
        "xdp",
        &vmlinux_btf,
        &xdp_btf_section,
        &xdp_btf_ext_section,
    )?;

    let mut log_buf = vec![0; 4096];
    let prog_fd = unsafe {
        syscalls_wrapper::bpf_prog_load(BpfProgType::Xdp, &xdp_section, "GPL", &mut log_buf, 1)?
    };
    // attach xdp to lo interface
    let ret = unsafe { syscalls_wrapper::xdp_attach(1, prog_fd as i32)? };
    std::thread::sleep(std::time::Duration::from_secs(3));
    unsafe { syscalls_wrapper::close(ret)? };

    Ok(())
}

/// vmlinux is generated by `bpftool btf dump file /sys/kernel/btf/vmlinux format c > vmlinux.h`
/// xdp_ipv6_drop_core.o was compiled with vmlinux.h generated in the kernel 6.14.4 version
/// xdp_ipv6_drop_core_wrong.o was compiled with a different ethhdr type
static PROGRAM: &str = r#"
#include "vmlinux.h"
#include <bpf/bpf_helpers.h>
#include <bpf/bpf_endian.h>
#include <bpf/bpf_core_read.h>

#define ETH_P_IPV6	0x86DD

SEC("xdp")
int xdp_drop_ipv6(struct xdp_md *ctx) {
    void *data = (void *)(long)ctx->data;
    void *data_end = (void *)(long)ctx->data_end;

    struct ethhdr *eth = data;
    if ((void *)(eth + 1) > data_end)
        return XDP_PASS;

    __u16 proto = bpf_ntohs(eth->h_proto);
    if (proto == ETH_P_IPV6)
        return XDP_DROP;

    return XDP_PASS;
}

char _license[] SEC("license") = "GPL";
"#;
